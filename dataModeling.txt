NoSql schema
1.When to have multiple collections in nosql.
 1.1. If the objects you are going to embed may be accessed in a isolated way (it makes sense to access it out of the document context) you have a reason for not embedding.

 1.2. If the array with embedded objects may grow in an unbounded way, you have another reason for not embedding.

 1.3. Embedding one to many relationship on the one side can help in saving extra queries. But gain can quickly turn into lose if those objects are getting updated very frequently.

2. Three basic types One-to-N schema designs in NoSql:
  2.1 Embed the N side if the cardinality is one-to-few and there is no need to access the embedded object outside the context of the parent object.

  2.2 Use an array of references to the N-side objects if the cardinality is one-to-many or if the N-side objects can be queried independently of 1 side.

  2.3. Use a reference to the One-side in the N-side objects if the cardinality is one-to-squillions(large indefinte size)


What to choose sql or nosql

Nosql
  When to use : If the data in your application has a document like structure(i.e. a tree with one to many relationships where typically the entire tree is loaded at once) then its probabily is good idea to use document model.

  However the relational technique of shreddig- splitting the document into multiple tables can lead to cumbersome schema and unnecessay complicated application code.

  More suitable for analytical application as many to many relationships are not usually needed.
  pros:
       flexible and evolving schema.
       suitable for big volume of data.
       suitable where eventual consistency can be tolerated.
       JSON schema has better locality than the multi table schema.

  cons: 1. Many to one and Many to many relatioships are very weakly supported.. As projects get bigger they tend to have more usecases. And subobjects in a document are queried independently of the main object. As soon as these usecases start to have many-to-many and many-to-one queries. It does not fit well in Json schema. This leads to breaking of hierarchial model(JSON) to relational model.
  2. querying a small piece of data from a big document will fetch the whole document.
  3. updation of document size form some update in  some field require rewritten of whole document again. information.


 Sql
  pros:
        RDBMS are at their best when performing intensive read/write operations on small or medium sized data sets.
        Need strong consistency.
       
  cons:
        Does not scale well in horizontal scalability bcause of ACID rules

Notes : For highly interconnected data the document model is awkward, the relational model is acceptable and graph model are most neutral.

There is an implicit schema because the application need some kind of structure but it is not enforced by the database. A more accurate term is schema-on-read(the structure of the data is implicit and only interpreted when data is read) , in contrast to schema on write (the traditional approach of relational database where schema is explicit and the database ensures all written conforms to all).

Scheama on read advantages:
Case1: there are many different type of objects and it is not practical to put each type of object in its own table.
case2:The structue of data is determined by external systems over which you have no control and which may change at any time.

