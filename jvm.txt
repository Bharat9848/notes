JVM

1.Thread's stack and method call basics:
Each thread in JVM comes with its own stack where it holds frames of method invocations that are currently happening on that thread.Each mehtod invocation frame consist of local variable array and operand stack. The frame is popped when a method terminates, either by returning normally or if an uncaught exception is thrown

Each Method frame consist of
1.Local variable array is used to store parameters and other local variables that are defined in that method. 
2. Operand stack is used to store temporarily other method operands that will be called from this function. 
3.It also store the return values from any other method called from this method. 
4.And reference to runtime constant pool for class of current method. This reference helps in dynamic linking.

2.Exception table
Java has a exception table in non heap storage for each method for each exception declared. It has a four fields as follows
1. From field represent bytecode location of immediate command following try clause.
2. To field represent bytecode location of last command for that exception block. It typically the last command in finally block or catch block.
3. Target field represent handler code's starting bytecode location. Its typically the location of first bytecode in catch block of that exception.
4. Type field represent the type of exception. For finally block its value is any.

3.Uncaught Exception occur -> Thead dies.
If a non caught exception occurs just because there is no entry in exception table, it will pop out all the method frames from thread's stack and Thread will die. That’s why it’s always recommended to set a last resort uncaught exception handler, to capture whatever is left from the context of that error.

4.Java Thread properties.
a. Thread local storage, b.allocation buffers(?), c. synchronization Object d. stack, e. program counter f. native thread.

5. JVM System Threads.
a.VM thread
This thread waits for operations to appear that require the JVM to reach a safe-point. The reason these operations have to happen on a separate thread is because they all require the JVM to be at a safe point where modifications to the heap can not occur. The type of operations performed by this thread are "stop-the-world" garbage collections, thread stack dumps, thread suspension and biased locking revocation.

b.Periodic task thread
This thread is responsible for timer events (i.e. interrupts) that are used to schedule execution of periodic operations

c.GC threads
These threads support the different types of garbage collection activities that occur in the JVM

d.Compiler threads
These threads compile byte code to native code at runtime

e.Signal dispatcher thread
This thread receives signals sent to the JVM process and handle them inside the JVM by calling the appropriate JVM methods.

6. Non Heap memory:
It contains 
a. permanent generatrion area which includes intern Strings and method area.
b.Code cache : used for compilation and storage of native code thats compiled by JIT compiler of some hot method.

7.Finally block
Finally exception handlers match all types of exceptions and so always execute whenever an exception is thrown. In the case when no exception is thrown a finally block is still executed at the end of a method, this is achieved by jumping to the finally handler code immediately before the return statement is executed.






HOTSPOT JVM
There is direct mapping between java thread and native os thread.
